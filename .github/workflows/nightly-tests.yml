name: Nightly Tests

on:
  schedule:
    # Run every night at 2 AM UTC
    - cron: '0 2 * * *'
  workflow_dispatch: # Allow manual trigger

jobs:
  comprehensive-e2e:
    name: Cross-browser E2E Tests
    runs-on: ubuntu-latest
    strategy:
      fail-fast: false
      matrix:
        browser: [chromium, firefox, webkit]
        
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: pnpm exec playwright install --with-deps

      - name: Run all e2e tests for ${{ matrix.browser }}
        run: pnpm playwright test --project=${{ matrix.browser }}
        env:
          CI: true
          NEXTAUTH_SECRET: nightly-test-secret-key
          NEXTAUTH_URL: http://localhost:3000

      - name: Upload test results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: nightly-test-results-${{ matrix.browser }}
          path: |
            test-results/
            playwright-report/
          retention-days: 14

  performance-tests:
    name: Performance Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: pnpm exec playwright install chromium --with-deps

      - name: Run performance tests
        run: |
          # Build and start application first
          pnpm build
          pnpm start &
          
          # Wait for application to be ready
          timeout 60s bash -c 'until curl -f http://localhost:3000; do sleep 2; done'
          
          # Run Lighthouse CI or similar performance tests
          npx lighthouse http://localhost:3000 --output=json --output-path=./lighthouse-report.json --chrome-flags="--headless --no-sandbox"
        env:
          NEXTAUTH_SECRET: performance-test-secret
          NEXTAUTH_URL: http://localhost:3000
          
      - name: Upload performance results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: performance-results
          path: lighthouse-report.json
          retention-days: 30

  accessibility-tests:
    name: Accessibility Tests
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '20'

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          run_install: false

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Playwright browsers
        run: pnpm exec playwright install chromium --with-deps

      - name: Run accessibility tests
        run: |
          # Build and start application first
          pnpm build
          pnpm start &
          
          # Wait for application to be ready
          timeout 60s bash -c 'until curl -f http://localhost:3000; do sleep 2; done'
          
          # Install axe-core CLI
          npm install -g @axe-core/cli
          
          # Run accessibility tests on key pages
          axe http://localhost:3000/login --exit
          axe http://localhost:3000/register --exit
        env:
          NEXTAUTH_SECRET: accessibility-test-secret
          NEXTAUTH_URL: http://localhost:3000

      - name: Upload accessibility results
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: accessibility-results
          path: axe-results/
          retention-days: 14

  notification:
    name: Test Notification
    runs-on: ubuntu-latest
    needs: [comprehensive-e2e, performance-tests, accessibility-tests]
    if: always()
    
    steps:
      - name: Send notification
        run: |
          if [[ "${{ needs.comprehensive-e2e.result }}" == "success" && \
                "${{ needs.performance-tests.result }}" == "success" && \
                "${{ needs.accessibility-tests.result }}" == "success" ]]; then
            echo "✅ All nightly tests passed!"
          else
            echo "❌ Some nightly tests failed!"
            echo "Cross-browser E2E: ${{ needs.comprehensive-e2e.result }}"
            echo "Performance: ${{ needs.performance-tests.result }}"
            echo "Accessibility: ${{ needs.accessibility-tests.result }}"
          fi
          
          # You can add Slack/Discord/email notifications here
          # Example: curl -X POST -H 'Content-type: application/json' \
          #   --data '{"text":"Nightly test results: ..."}' \
          #   ${{ secrets.SLACK_WEBHOOK_URL }} 