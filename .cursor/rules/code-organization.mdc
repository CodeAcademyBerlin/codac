---
description: Organize code in a consistent and logical manner.
globs: */**
alwaysApply: false
---
- Structure files logically, grouping related components, helpers, types and static content
- Prefer named exports for components over default exports
- Favor small, single-purpose components over large, monolithic ones
- Separate concerns between presentational and container components
- Use consistent file naming: kebab-case for files, PascalCase for components

## Project Structure

The folders follow a standard Next.js application with specific conventions:

/actions - Server-side mutations (Create, Update, Delete operations)
/app - Next.js App Router pages and API routes
  /(admin) - Admin-only pages with role-based access
  /api - API route handlers for external integrations
  /auth.config.ts, /auth.ts - NextAuth configuration and setup
  /db.ts - Centralized database connection and basic queries
/components - Reusable UI components organized by feature
  /ui - Base UI components (buttons, inputs, dialogs) from shadcn/ui
  /editor - Plate.js editor components and plugins
  /providers - React context providers (session, theme, etc.)
/db - Database schema and configuration
  /schema.ts - Drizzle ORM schema definitions
/drizzle - Database migrations and metadata
  /meta - Migration metadata and journal
/hooks - Custom React hooks for shared logic
/lib - Shared utility functions and configurations
  /utils.ts - Utility functions and class name helpers
  /constants.ts - Application constants and configuration
/public - Static assets (images, icons, fonts)
/types - TypeScript type definitions and DTOs
/__tests__ - Test files and test utilities

## Component Organization

- Group related components in feature-specific directories
- Keep component files focused on a single responsibility
- Use index files for clean imports when appropriate
- Separate complex components into smaller, composed parts
- Co-locate related files (component, styles, tests) when beneficial
- Use the `/components/ui` directory for reusable UI primitives
- Place feature-specific components in dedicated subdirectories